<?php

function mka_ical($atts,$thing=''){$time_start=microtime(true);global$txpcfg;extract(lAtts(array('url'=>'','cachingtime'=>30,'googlemail'=>'','limit'=>0,'pastevents'=>false,'yearview'=>false,'fmttime'=>'%H:%M','fmtdate'=>'%d.%m.%Y','imgfolder'=>'','imgcat'=>'','defaultimage'=>'none.gif','break'=>'li','class'=>__FUNCTION__,'cssid'=>'icalevents','wraptag'=>'ul','form'=>''),$atts));if($yearview!==false){$pastevents=true;}if(strlen($thing)>0){$body=$thing;}elseif(!empty($form)){$body=fetch_form($form);}else{$body='<span class="date">{date}</span>'.'<span class="title">{title}</span>'.'<span class="description">{description}</span>';}if(strlen($googlemail)>0){$tmp=explode("@",$googlemail);$gmail=$tmp[0];$urls[]="http://www.google.com/calendar/ical/".$googlemail."%40googlemail.com/public/basic.ics";}if(strlen($url)>0){foreach(explode(",",$url)as$u)$urls[]=trim($u);}if(sizeof($urls)===0){return"Error: No url given.";}$show_img=false;if((strlen($imgcat)>0)||(strlen($imgfolder)>0)){$images=array();if(strlen($imgcat)>0){$images=mka_imgarrayfromcat($imgcat);}if(file_exists($imgfolder)){$images=array_merge(mka_imgarrayfromfolder($imgfolder));}if(sizeof($images)>0){$show_img=true;$defimg=ical_defimg($defaultimage);}}$events=checkCache($urls,$cachingtime);$i=1;foreach($events as$evt){if(($pastevents||$evt->end>mktime())&&($limit==0||$i<=$limit)){$evt->sum=ical_formatText($evt->sum);$evt->des=ical_formatText($evt->des);$dateView=ical_getDateView($evt,$fmtdate,$fmttime);$keys=array();$vals=array();if($show_img){$image=ical_img($evt->sum,$images,$defimg);$keys[]='{imagesrc}';$vals[]=$image['src'];$keys[]='{imageid}';$vals[]=$image['id'];}$keys[]='{date}';$vals[]=$dateView;$keys[]='{title}';$vals[]=$evt->sum;$keys[]='{description}';$vals[]=$evt->des;$dates[]=$evt->start;$out[]=parse(str_replace($keys,$vals,$body));$i++;}}$gen="<!-- mka_ical - generated in ".((microtime(true)-$time_start)*1000)."ms -->";if($yearview){for($i=0;$i<count($dates);$i++){$date=$dates[$i];}$ret=doWrap($out,$wraptag,$break,$class,'','','',$cssid).$gen;}else{$ret=doWrap($out,$wraptag,$break,$class,'','','',$cssid).$gen;}return$ret;}function ical_img($title,$images,$defimg){$search=array(" ",".","-");$rep=array("","","");$t=str_replace($search,$rep,strtolower($title));foreach($images as$im){if(strpos($t,$im['name'])!==false){return$im;}}return$defimg;}function ical_getDateView($evt,$fmt_date,$fmt_time){$fmt_dati=$fmt_date." ".$fmt_time;if(date("dmY",$evt->start)==date("dmY",$evt->end-1)){if(date("H:i",$evt->start)=="00:00"&&date("H:i",$evt->end)=="00:00"){$dateView=strftime($fmt_date,$evt->start);}else{$dateView=strftime($fmt_dati,$evt->start)."-".strftime($fmt_time,$evt->start+$evt->duration);}}else{$dateView=strftime($fmt_date,$evt->start)."-".strftime($fmt_date,$evt->end-1);}return$dateView;}function mka_makearr_sql($str,$type='string',$delimeter=','){$ret=array();$arr=explode($delimeter,$str);foreach($arr as$el){if($type=='string')$ret[]="'".trim($el)."'";else$ret[]=$el;}return$ret;}function mka_imgarrayfromcat($cats){$imgs=array();$cats=mka_makearr_sql($cats);$clause='category IN ('.implode(",",$cats).')';$attrs='id, name, ext';$rs=safe_rows($attrs,'txp_image',$clause);$prefix="http://".$GLOBALS['prefs']["siteurl"]."/".$GLOBALS['prefs']['img_dir']."/";if(count($rs)!=0){foreach($rs as$col){$col['src']=$prefix.$col['id'].$col['ext'];$imgs[]=$col;}}return$imgs;}function mka_imgarrayfromfolder($imgfolder){$imgs=array();if($handle=@opendir($imgfolder)){while(($file=@readdir($handle))!==false){$img=array();$parts=explode(".",$file);$img['ext']=(count($parts)>1)?".".array_pop($parts):'';$img['name']=implode(".",$parts);$img['src']="http://".$GLOBALS['prefs']["siteurl"]."/".$imgfolder."/".$file;if(strlen($img['name'])>0&&in_array(strtolower($img['ext']),array(".png",".jpg",".jpeg",".gif"))){$imgs[]=$img;}}closedir($handle);}return$imgs;}function ical_defimg($defimg){$url="http://".$GLOBALS['prefs']["siteurl"]."/";$img=array();if(intval($defimg)!==0){$id=intval($defimg);$img=safe_row('id, name, ext','txp_image','id = '.$id);}if(sizeof($img)===0){$parts=explode(".",basename($defimg));$img['ext']=(count($parts)>1)?".".array_pop($parts):'';$img['name']=implode(".",$parts);$img['src']=$url.$defimg;}else{$img["src"]=$url.$GLOBALS['prefs']['img_dir']."/".$img['id'].$img['ext'];}return$img;}function ical_shorten_link($string){$text_word_maxlength=55;if(count($string)==2){$pre="";$url=$string[1];}else{$pre=$string[1];$url=$string[2];}$shortened_url=$url;if(strlen($url)>$text_word_maxlength)$shortened_url=substr($url,0,($text_word_maxlength/2))."...".substr($url,-($text_word_maxlength-3-$text_word_maxlength/2));return$pre."<a href=\"".$url."\">".$shortened_url."</a>";}function ical_formatText($string){$string=' '.$string;$string=preg_replace_callback("#(^|[\n ])([\w]+?://.*?[^ \"\n\r\t<]*)#is","ical_shorten_link",$string);$string=preg_replace("#(^|[\n ])((www|ftp)\.[\w\-]+\.[\w\-.\~]+(?:/[^ \"\t\n\r<]*)?)#is","$1<a href=\"http://$2\">$2</a>",$string);$string=str_replace("\n","<br/>",$string);return$string;}function checkCache($urls,$cachingtime){$hash=md5(implode(",",$urls));$fn="files/mka_ical_".$hash.".json";if(file_exists($fn)&&(time()-filemtime($fn)<($cachingtime*60))){$cache_file=fopen($fn,"r");$data=fread($cache_file,filesize($fn));fclose($cache_file);return json_decode($data);}else{$events=getEvents($urls);$cf=fopen($fn,"w+");fwrite($cf,json_encode($events));fclose($cf);return$events;}}function getEvents($urls){$events=array();$reader=new SG_iCal();foreach($urls as$u){$reader->setUrl($u,true);$e=$reader->getEvents();foreach($e as$event){$plainEvents=getPlainEvents($event);$events=array_merge($events,$plainEvents);}}usort($events,"cmp_event");return$events;}function getPlainEvents($evt){$plainEvents=array();$plainEvent=new stdClass;$plainEvent->start=$evt->getStart();$plainEvent->end=$evt->getEnd();$plainEvent->duration=$evt->getDuration();$plainEvent->sum=$evt->getSummary();$plainEvent->des=$evt->getDescription();$plainEvent->loc=$evt->getLocation();$rec=$evt->getProperty('recurrence');if($rec===null){$plainEvent->rec=false;}else{$plainEvent->rec=json_encode(getPlainRec($rec));}$timestamps=null;if($evt->getFrequency()){$freq=$evt->getFrequency();$timestamps=$freq->getAllOccurrences();$i=1;foreach($timestamps as$ts){if($ts!==$plainEvent->start){$recEvent=clone$plainEvent;$recEvent->start=$ts;$recEvent->end=$ts+$plainEvent->duration;$recEvent->duration=$plainEvent->duration;$plainEvents[]=$recEvent;}}}$plainEvents[]=$plainEvent;return$plainEvents;}function getPlainRec($rec){$r=new stdClass;$class_methods=get_class_methods($rec);foreach($class_methods as$method){if(substr($method,0,3)==='get'){$prop=strtolower(substr($method,3));$r->$prop=$rec->$method();}}return$r;}function cmp_event($a,$b){$da=$a->start;$db=$b->start;if($da==$db){return 1;}return($da<$db)?-1:1;}define('SG_ICALREADER_VERSION','0.7.0');class SG_iCal{public$information;public$timezones;protected$events;public function __construct($url=false){$this->setUrl($url);}public function setUrl($url=false){if($url!==false){SG_iCal_Parser::Parse($url,$this);}}public function getCalendarInfo(){return$this->information;}public function setCalendarInfo(SG_iCal_VCalendar$info){$this->information=$info;}public function getTimeZoneInfo($tzid=null){if($tzid==null){return$this->timezones;}else{if(!isset($this->timezones)){return null;}foreach($this->timezones AS$tz){if($tz->getTimeZoneId()==$tzid){return$tz;}}return null;}}public function addTimeZone(SG_iCal_VTimeZone$tz){$this->timezones[]=$tz;}public function getEvents(){return$this->events;}public function addEvent(SG_iCal_VEvent$event){$this->events[]=$event;}}class SG_iCalReader extends SG_iCal{}class SG_iCal_Duration{protected$dur;public function __construct($duration){$ts=0;if(preg_match('/[\\+\\-]{0,1}P((\d+)W)?((\d+)D)?(T)?((\d+)H)?((\d+)M)?((\d+)S)?/',$duration,$matches)===1){$results=array('weeks'=>(int)@$matches[2],'days'=>(int)@$matches[4],'hours'=>(int)@$matches[7],'minutes'=>(int)@$matches[9],'seconds'=>(int)@$matches[11]);$ts+=$results['seconds'];$ts+=60*$results['minutes'];$ts+=60*60*$results['hours'];$ts+=24*60*60*$results['days'];$ts+=7*24*60*60*$results['weeks'];}else{}$dir=($duration{0}=='-')?-1:1;$this->dur=$dir*$ts;}public function getDuration(){return$this->dur;}}class SG_iCal_Factory{public static function factory(SG_iCal$ical,$section,$data){switch($section){case"vcalendar":return new SG_iCal_VCalendar(SG_iCal_Line::Remove_Line($data),$ical);case"vtimezone":return new SG_iCal_VTimeZone(SG_iCal_Line::Remove_Line($data),$ical);case"vevent":return new SG_iCal_VEvent($data,$ical);default:return new ArrayObject(SG_iCal_Line::Remove_Line((array)$data));}}}class SG_iCal_Freq{protected$weekdays=array('MO'=>'monday','TU'=>'tuesday','WE'=>'wednesday','TH'=>'thursday','FR'=>'friday','SA'=>'saturday','SU'=>'sunday');protected$knownRules=array('month','weekno','day','monthday','yearday','hour','minute');protected$ruleModifiers=array('wkst');protected$simpleMode=true;protected$rules=array('freq'=>'yearly','interval'=>1);protected$start=0;protected$freq='';protected$excluded;protected$added;protected$cache;public function __construct($rule,$start,$excluded=array(),$added=array()){$this->start=$start;$this->excluded=array();$rules=array();foreach(explode(';',$rule)AS$v){list($k,$v)=explode('=',$v);$this->rules[ strtolower($k)]=$v;}if(isset($this->rules['until'])&&is_string($this->rules['until'])){$this->rules['until']=strtotime($this->rules['until']);}$this->freq=strtolower($this->rules['freq']);foreach($this->knownRules AS$rule){if(isset($this->rules['by'.$rule])){if($this->isPrerule($rule,$this->freq)){$this->simpleMode=false;}}}if(!$this->simpleMode){if(!(isset($this->rules['byday'])||isset($this->rules['bymonthday'])||isset($this->rules['byyearday']))){$this->rules['bymonthday']=date('d',$this->start);}}if(isset($this->rules['count'])){$cache[$ts]=$ts=$this->start;for($n=1;$n<$this->rules['count'];$n++){$ts=$this->findNext($ts);$cache[$ts]=$ts;}$this->rules['until']=$ts;if(!empty($excluded)){foreach($excluded as$ts){unset($cache[$ts]);}}if(!empty($added)){$cache=$cache+$added;asort($cache);}$this->cache=array_values($cache);}$this->excluded=$excluded;$this->added=$added;}public function getAllOccurrences(){if(empty($this->cache)){$next=$this->firstOccurrence();while($next){$cache[]=$next;$next=$this->findNext($next);}if(!empty($this->added)){$cache=$cache+$this->added;asort($cache);}$this->cache=$cache;}return$this->cache;}public function previousOccurrence($offset){if(!empty($this->cache)){$t2=$this->start;foreach($this->cache as$ts){if($ts>=$offset)return$t2;$t2=$ts;}}else{$ts=$this->start;while(($t2=$this->findNext($ts))<$offset){if($t2==false){break;}$ts=$t2;}}return$ts;}public function nextOccurrence($offset){if($offset<$this->start)return$this->firstOccurrence();return$this->findNext($offset);}public function firstOccurrence(){$t=$this->start;if(in_array($t,$this->excluded))$t=$this->findNext($t);return$t;}public function lastOccurrence(){$this->getAllOccurrences();return end($this->cache);}public function findNext($offset){if(!empty($this->cache)){foreach($this->cache as$ts){if($ts>$offset)return$ts;}}$debug=false;if($offset===false||(isset($this->rules['until'])&&$offset>$this->rules['until'])){if($debug)echo'STOP: '.date('r',$offset)."\n";return false;}$found=true;if($debug)echo'O: '.date('r',$offset)."\n";$hour=(in_array($this->freq,array('hourly','minutely'))&&$offset>$this->start)?date('H',$offset):date('H',$this->start);$minute=(($this->freq=='minutely'||isset($this->rules['byminute']))&&$offset>$this->start)?date('i',$offset):date('i',$this->start);$t=mktime($hour,$minute,date('s',$this->start),date('m',$offset),date('d',$offset),date('Y',$offset));if($debug)echo'START: '.date('r',$t)."\n";if($this->simpleMode){if($offset<$t){$ts=$t;if($ts&&in_array($ts,$this->excluded))$ts=$this->findNext($ts);}else{$ts=$this->findStartingPoint($t,$this->rules['interval'],false);if(!$this->validDate($ts)){$ts=$this->findNext($ts);}}return$ts;}$eop=$this->findEndOfPeriod($offset);if($debug)echo'EOP: '.date('r',$eop)."\n";foreach($this->knownRules AS$rule){if($found&&isset($this->rules['by'.$rule])){if($this->isPrerule($rule,$this->freq)){$subrules=explode(',',$this->rules['by'.$rule]);$_t=null;foreach($subrules AS$subrule){$imm=call_user_func_array(array($this,'ruleBy'.$rule),array($subrule,$t));if($imm===false){break;}if($debug)echo strtoupper($rule).': '.date('r',$imm).' A: '.((int)($imm>$offset&&$imm<$eop))."\n";if($imm>$offset&&$imm<$eop&&($_t==null||$imm<$_t)){$_t=$imm;}}if($_t!==null){$t=$_t;}else{$found=$this->validDate($t);}}}}if($offset<$this->start&&$this->start<$t){$ts=$this->start;}elseif($found&&($t!=$offset)){if($this->validDate($t)){if($debug)echo'OK'."\n";$ts=$t;}else{if($debug)echo'Invalid'."\n";$ts=$this->findNext($t);}}else{if($debug)echo'Not found'."\n";$ts=$this->findNext($this->findStartingPoint($offset,$this->rules['interval']));}if($ts&&in_array($ts,$this->excluded))return$this->findNext($ts);return$ts;}private function findStartingPoint($offset,$interval,$truncate=true){$_freq=($this->freq=='daily')?'day__':$this->freq;$t='+'.$interval.' '.substr($_freq,0,-2).'s';if($_freq=='monthly'&&$truncate){if($interval>1){$offset=strtotime('+'.($interval-1).' months ',$offset);}$t='+'.(date('t',$offset)-date('d',$offset)+1).' days';}$sp=strtotime($t,$offset);if($truncate){$sp=$this->truncateToPeriod($sp,$this->freq);}return$sp;}public function findEndOfPeriod($offset){return$this->findStartingPoint($offset,1);}private function truncateToPeriod($time,$freq){$date=getdate($time);switch($freq){case"yearly":$date['mon']=1;case"monthly":$date['mday']=1;case"daily":$date['hours']=0;case'hourly':$date['minutes']=0;case"minutely":$date['seconds']=0;break;case"weekly":if(date('N',$time)==1){$date['hours']=0;$date['minutes']=0;$date['seconds']=0;}else{$date=getdate(strtotime("last monday 0:00",$time));}break;}$d=mktime($date['hours'],$date['minutes'],$date['seconds'],$date['mon'],$date['mday'],$date['year']);return$d;}private function ruleByday($rule,$t){$dir=($rule{0}=='-')?-1:1;$dir_t=($dir==1)?'next':'last';$d=$this->weekdays[substr($rule,-2)];$s=$dir_t.' '.$d.' '.date('H:i:s',$t);if($rule==substr($rule,-2)){if(date('l',$t)==ucfirst($d)){$s='today '.date('H:i:s',$t);}$_t=strtotime($s,$t);if($_t==$t&&in_array($this->freq,array('monthly','yearly'))){$s='next '.$d.' '.date('H:i:s',$t);$_t=strtotime($s,$_t);}return$_t;}else{$_f=$this->freq;if(isset($this->rules['bymonth'])&&$this->freq=='yearly'){$this->freq='monthly';}if($dir==-1){$_t=$this->findEndOfPeriod($t);}else{$_t=$this->truncateToPeriod($t,$this->freq);}$this->freq=$_f;$c=preg_replace('/[^0-9]/','',$rule);$c=($c=='')?1:$c;$n=$_t;while($c>0){if($dir==1&&$c==1&&date('l',$t)==ucfirst($d)){$s='today '.date('H:i:s',$t);}$n=strtotime($s,$n);$c--;}return$n;}}private function ruleBymonth($rule,$t){$_t=mktime(date('H',$t),date('i',$t),date('s',$t),$rule,date('d',$t),date('Y',$t));if($t==$_t&&isset($this->rules['byday'])){return false;}else{return$_t;}}private function ruleBymonthday($rule,$t){if($rule<0){$rule=date('t',$t)+$rule+1;}return mktime(date('H',$t),date('i',$t),date('s',$t),date('m',$t),$rule,date('Y',$t));}private function ruleByyearday($rule,$t){if($rule<0){$_t=$this->findEndOfPeriod();$d='-';}else{$_t=$this->truncateToPeriod($t,$this->freq);$d='+';}$s=$d.abs($rule-1).' days '.date('H:i:s',$t);return strtotime($s,$_t);}private function ruleByweekno($rule,$t){if($rule<0){$_t=$this->findEndOfPeriod();$d='-';}else{$_t=$this->truncateToPeriod($t,$this->freq);$d='+';}$sub=(date('W',$_t)==1)?2:1;$s=$d.abs($rule-$sub).' weeks '.date('H:i:s',$t);$_t=strtotime($s,$_t);return$_t;}private function ruleByhour($rule,$t){$_t=mktime($rule,date('i',$t),date('s',$t),date('m',$t),date('d',$t),date('Y',$t));return$_t;}private function ruleByminute($rule,$t){$_t=mktime(date('h',$t),$rule,date('s',$t),date('m',$t),date('d',$t),date('Y',$t));return$_t;}private function validDate($t){if(isset($this->rules['until'])&&$t>$this->rules['until']){return false;}if(in_array($t,$this->excluded)){return false;}if(isset($this->rules['bymonth'])){$months=explode(',',$this->rules['bymonth']);if(!in_array(date('m',$t),$months)){return false;}}if(isset($this->rules['byday'])){$days=explode(',',$this->rules['byday']);foreach($days As$i=>$k){$days[$i]=$this->weekdays[ preg_replace('/[^A-Z]/','',$k)];}if(!in_array(strtolower(date('l',$t)),$days)){return false;}}if(isset($this->rules['byweekno'])){$weeks=explode(',',$this->rules['byweekno']);if(!in_array(date('W',$t),$weeks)){return false;}}if(isset($this->rules['bymonthday'])){$weekdays=explode(',',$this->rules['bymonthday']);foreach($weekdays As$i=>$k){if($k<0){$weekdays[$i]=date('t',$t)+$k+1;}}if(!in_array(date('d',$t),$weekdays)){return false;}}if(isset($this->rules['byhour'])){$hours=explode(',',$this->rules['byhour']);if(!in_array(date('H',$t),$hours)){return false;}}return true;}private function isPrerule($rule,$freq){if($rule=='year')return false;if($rule=='month'&&$freq=='yearly')return true;if($rule=='monthday'&&in_array($freq,array('yearly','monthly'))&&!isset($this->rules['byday']))return true;if($rule=='yearday'&&$freq=='yearly')return true;if($rule=='weekno'&&$freq=='yearly')return true;if($rule=='day'&&in_array($freq,array('yearly','monthly','weekly')))return true;if($rule=='hour'&&in_array($freq,array('yearly','monthly','weekly','daily')))return true;if($rule=='minute')return true;return false;}}class SG_iCal_Line implements ArrayAccess,Countable,IteratorAggregate{protected$ident;protected$data;protected$params=array();protected$replacements=array('from'=>array('\\,','\\n','\\;','\\:','\\"'),'to'=>array(',',"\n",';',':','"'));public function __construct($line){$split=strpos($line,':');$idents=explode(';',substr($line,0,$split));$ident=strtolower(array_shift($idents));$data=trim(substr($line,$split+1));$data=str_replace($this->replacements['from'],$this->replacements['to'],$data);$params=array();foreach($idents AS$v){list($k,$v)=explode('=',$v);$params[ strtolower($k)]=$v;}$this->ident=$ident;$this->params=$params;$this->data=$data;}public function isBegin(){return$this->ident=='begin';}public function isEnd(){return$this->ident=='end';}public function getIdent(){return$this->ident;}public function getData(){return$this->data;}public function getDataAsArray(){if(strpos($this->data,",")!==false){return explode(",",$this->data);}else return array($this->data);}public static function Remove_Line($arr){$rtn=array();foreach($arr AS$k=>$v){if(is_array($v)){$rtn[$k]=self::Remove_Line($v);}elseif($v instanceof SG_iCal_Line){$rtn[$k]=$v->getData();}else{$rtn[$k]=$v;}}return$rtn;}public function offsetExists($param){return isset($this->params[ strtolower($param)]);}public function offsetGet($param){$index=strtolower($param);if(isset($this->params[$index ])){return$this->params[$index ];}}public function offsetSet($param,$val){return false;}public function offsetUnset($param){return false;}public function __toString(){return$this->getData();}public function count(){return count($this->params);}public function getIterator(){return new ArrayIterator($this->params);}}class SG_iCal_Parser{public static function Parse($url,SG_iCal$ical){$content=self::Fetch($url);$content=self::UnfoldLines($content);self::_Parse($content,$ical);}public static function ParseString($content,SG_iCal$ical){$content=self::UnfoldLines($content);self::_Parse($content,$ical);}protected static function Fetch($resource){$is_utf8=true;if(is_file($resource)){$content=file_get_contents($resource);if(!self::_ValidUtf8($content)){$is_utf8=false;}}else{$c=curl_init();curl_setopt($c,CURLOPT_URL,$resource);curl_setopt($c,CURLOPT_RETURNTRANSFER,true);if(!ini_get('safe_mode')){curl_setopt($c,CURLOPT_FOLLOWLOCATION,true);}$content=curl_exec($c);$ct=curl_getinfo($c,CURLINFO_CONTENT_TYPE);$enc=preg_replace('/^.*charset=([-a-zA-Z0-9]+).*$/','$1',$ct);if($ct!=''&&strtolower(str_replace('-','',$enc))!='utf8'){$is_utf8=false;}elseif(!self::_ValidUtf8($content)){$is_utf8=false;}}if(!$is_utf8){$content=utf8_encode($content);}return$content;}protected static function UnfoldLines($content){$data=array();$content=explode("\n",$content);for($i=0;$i<count($content);$i++){$line=rtrim($content[$i]);while(isset($content[$i+1])&&strlen($content[$i+1])>0&&($content[$i+1]{0}==' '||$content[$i+1]{0}=="\t")){$line.=rtrim(substr($content[++$i],1));}$data[]=$line;}return$data;}private static function _Parse($content,SG_iCal$ical){$main_sections=array('vevent','vjournal','vtodo','vtimezone','vcalendar');$array_idents=array('exdate','rdate');$sections=array();$section='';$current_data=array();foreach($content AS$line){$line=new SG_iCal_Line($line);if($line->isBegin()){$section=strtolower($line->getData());$sections[]=strtolower($line->getData());}elseif($line->isEnd()){$removed=array_pop($sections);$section=end($sections);if(array_search($removed,$main_sections)!==false){self::StoreSection($removed,$current_data[$removed],$ical);$current_data[$removed]=array();}}else{foreach($main_sections AS$s){if(array_search($s,$sections)!==false){if($section==$s){if(in_array($line->getIdent(),$array_idents))$current_data[$s][$line->getIdent()][]=$line;else{$current_data[$s][$line->getIdent()]=$line;}}else{$current_data[$s][$section][$line->getIdent()]=$line;}break;}}}}$current_data=array();}protected static function storeSection($section,$data,SG_iCal$ical){$data=SG_iCal_Factory::Factory($ical,$section,$data);switch($section){case'vcalendar':return$ical->setCalendarInfo($data);case'vevent':return$ical->addEvent($data);case'vjournal':case'vtodo':return true;case'vtimezone':return$ical->addTimeZone($data);}}private static function _ValidUtf8($data){$rx='[\xC0-\xDF]([^\x80-\xBF]|$)';$rx.='|[\xE0-\xEF].{0,1}([^\x80-\xBF]|$)';$rx.='|[\xF0-\xF7].{0,2}([^\x80-\xBF]|$)';$rx.='|[\xF8-\xFB].{0,3}([^\x80-\xBF]|$)';$rx.='|[\xFC-\xFD].{0,4}([^\x80-\xBF]|$)';$rx.='|[\xFE-\xFE].{0,5}([^\x80-\xBF]|$)';$rx.='|[\x00-\x7F][\x80-\xBF]';$rx.='|[\xC0-\xDF].[\x80-\xBF]';$rx.='|[\xE0-\xEF]..[\x80-\xBF]';$rx.='|[\xF0-\xF7]...[\x80-\xBF]';$rx.='|[\xF8-\xFB]....[\x80-\xBF]';$rx.='|[\xFC-\xFD].....[\x80-\xBF]';$rx.='|[\xFE-\xFE]......[\x80-\xBF]';$rx.='|^[\x80-\xBF]';return(!(bool) preg_match('!'.$rx.'!',$data));}}class SG_iCal_Query{public static function Between($ical,$start,$end){if($ical instanceof SG_iCalReader){$ical=$ical->getEvents();}if(!is_array($ical)){throw new Exception('SG_iCal_Query::Between called with invalid input!');}$rtn=array();foreach($ical AS$e){if(($start<=$e->getStart()&&$e->getStart()<$end)||($start<$e->getRangeEnd()&&$e->getRangeEnd()<=$end)){$rtn[]=$e;}}return$rtn;}public static function After($ical,$start){if($ical instanceof SG_iCalReader){$ical=$ical->getEvents();}if(!is_array($ical)){throw new Exception('SG_iCal_Query::After called with invalid input!');}$rtn=array();foreach($ical AS$e){if($e->getStart()>=$start||$e->getRangeEnd()>=$start){$rtn[]=$e;}}return$rtn;}public static function Sort($ical,$column){if($ical instanceof SG_iCalReader){$ical=$ical->getEvents();}if(!is_array($ical)){throw new Exception('SG_iCal_Query::Sort called with invalid input!');}$cmp=create_function('$a, $b','return strcmp($a->getProperty("'.$column.'"), $b->getProperty("'.$column.'"));');usort($ical,$cmp);return$ical;}}class SG_iCal_Recurrence{public$rrule;protected$freq;protected$until;protected$count;protected$interval;protected$bysecond;protected$byminute;protected$byhour;protected$byday;protected$bymonthday;protected$byyearday;protected$byyearno;protected$bymonth;protected$bysetpos;protected$wkst;protected$listProperties=array('bysecond','byminute','byhour','byday','bymonthday','byyearday','byyearno','bymonth','bysetpos');public function __construct(SG_iCal_Line$line){$this->parseLine($line->getData());}protected function parseLine($line){$this->rrule=$line;$recurProperties=explode(';',$line);$recur=array();foreach($recurProperties as$property){$nameAndValue=explode('=',$property);$propertyName=strtolower($nameAndValue[0]);$propertyValue=$nameAndValue[1];if(in_array($propertyName,$this->listProperties)){$propertyValue=explode(',',$propertyValue);}$this->$propertyName=$propertyValue;}}public function setUntil($ts){if(is_int($ts))$dt=new DateTime('@'.$ts);else$dt=new DateTime($ts);$this->until=$dt->format('Ymd\THisO');}protected function getMember($member){if(isset($this->$member)){return$this->$member;}return false;}public function getFreq(){return$this->getMember('freq');}public function getUntil(){return$this->getMember('until');}public function getCount(){return$this->getMember('count');}public function getInterval(){return$this->getMember('interval');}public function getBySecond(){return$this->getMember('bysecond');}public function getByMinute(){return$this->getMember('byminute');}public function getByHour(){return$this->getMember('byhour');}public function getByDay(){return$this->getMember('byday');}public function getByMonthDay(){return$this->getMember('bymonthday');}public function getByYearDay(){return$this->getMember('byyearday');}public function getByYearNo(){return$this->getMember('byyearno');}public function getByMonth(){return$this->getMember('bymonth');}public function getBySetPos(){return$this->getMember('bysetpos');}public function getWkst(){return$this->getMember('wkst');}}class SG_iCal_VCalendar implements IteratorAggregate{protected$data;public function __construct($data){$this->data=$data;}public function getTitle(){if(isset($this->data['x-wr-calname'])){return$this->data['x-wr-calname'];}else{return null;}}public function getDescription(){if(isset($this->data['x-wr-caldesc'])){return$this->data['x-wr-caldesc'];}else{return null;}}public function getIterator(){return new ArrayIterator($this->data);}}class SG_iCal_VEvent{const DEFAULT_CONFIRMED=true;protected$uid;protected$start;protected$end;protected$summary;protected$description;protected$location;protected$laststart;protected$lastend;public$recurrence;public$recurex;public$excluded;public$added;public$freq;public$data;public function __construct($data,SG_iCal$ical){$this->excluded=array();$this->uid=$data['uid']->getData();unset($data['uid']);if(isset($data['rrule'])){$this->recurrence=new SG_iCal_Recurrence($data['rrule']);unset($data['rrule']);}if(isset($data['exrule'])){$this->recurex=new SG_iCal_Recurrence($data['exrule']);unset($data['exrule']);}if(isset($data['dtstart'])){$this->start=$this->getTimestamp($data['dtstart'],$ical);unset($data['dtstart']);}if(isset($data['dtend'])){$this->end=$this->getTimestamp($data['dtend'],$ical);unset($data['dtend']);}elseif(isset($data['duration'])){$dur=new SG_iCal_Duration($data['duration']->getData());$this->end=$this->start+$dur->getDuration();unset($data['duration']);}if(isset($this->recurrence)){if(isset($data['exdate'])){foreach($data['exdate'] as$exdate){foreach($exdate->getDataAsArray()as$ts){$this->excluded[]=strtotime($ts);}}unset($data['exdate']);}if(isset($data['rdate'])){foreach($data['rdate'] as$rdate){foreach($rdate->getDataAsArray()as$ts){$this->added[]=strtotime($ts);}}unset($data['rdate']);}$until=$this->recurrence->getUntil();$count=$this->recurrence->getCount();if($until){}elseif($count){$this->getFrequency();$until=$this->freq->lastOccurrence($this->start);}else{$this->recurrence->setUntil('+3 years');$until=$this->recurrence->getUntil();}$this->laststart=strtotime($until);$this->lastend=$this->laststart+$this->getDuration();}$imports=array('summary','description','location');foreach($imports AS$import){if(isset($data[$import])){$this->$import=$data[$import]->getData();unset($data[$import]);}}if(isset($this->previous_tz)){date_default_timezone_set($this->previous_tz);}$this->data=SG_iCal_Line::Remove_Line($data);}public function getFrequency(){if(!isset($this->freq)){if(isset($this->recurrence)){$this->freq=new SG_iCal_Freq($this->recurrence->rrule,$this->start,$this->excluded,$this->added);}}return$this->freq;}public function getUID(){return$this->uid;}public function getSummary(){return$this->summary;}public function getDescription(){return$this->description;}public function getLocation(){return$this->location;}public function isBlocking(){return!(isset($this->data['transp'])&&$this->data['transp']=='TRANSPARENT');}public function isConfirmed(){if(!isset($this->data['status'])){return self::DEFAULT_CONFIRMED;}else{return$this->data['status']=='CONFIRMED';}}public function isWholeDay(){$dur=$this->getDuration();if($dur>0&&($dur%86400)==0){return true;}return false;}public function getStart(){return$this->start;}public function getEnd(){return$this->end;}public function getRangeEnd(){return max($this->end,$this->lastend);}public function getDuration(){return$this->end-$this->start;}public function getProperty($prop){if(isset($this->$prop)){return$this->$prop;}elseif(isset($this->data[$prop])){return$this->data[$prop];}else{return null;}}protected function setLineTimeZone(SG_iCal_Line$line){if(isset($line['tzid'])){if(!isset($this->previous_tz)){$this->previous_tz=@date_default_timezone_get();}$this->tzid=$line['tzid'];date_default_timezone_set($this->tzid);return true;}return false;}protected function getTimestamp(SG_iCal_Line$line,SG_iCal$ical){if(isset($line['tzid'])){$this->setLineTimeZone($line);}$ts=strtotime($line->getData());return$ts;}}class SG_iCal_VTimeZone{protected$tzid;protected$daylight;protected$standard;protected$cache=array();public function __construct($data){$this->tzid=$data['tzid'];$this->daylight=$data['daylight'];$this->standard=$data['standard'];}public function getTimeZoneId(){return$this->tzid;}public function getOffset($ts){$act=$this->getActive($ts);return$this->{$act}['tzoffsetto'];}public function getTimeZoneName($ts){$act=$this->getActive($ts);return$this->{$act}['tzname'];}private function getActive($ts){if(class_exists('DateTimeZone')){$tz=new DateTimeZone($this->tzid);$date=new DateTime("@$ts",$tz);return($date->format('I')==1)?'daylight':'standard';}else{if(isset($this->cache[$ts])){return$this->cache[$ts];}$daylight_freq=new SG_iCal_Freq($this->daylight['rrule'],strtotime($this->daylight['dtstart']));$standard_freq=new SG_iCal_Freq($this->standard['rrule'],strtotime($this->standard['dtstart']));$last_standard=$standard_freq->previousOccurrence($ts);$last_dst=$daylight_freq->previousOccurrence($ts);if($last_dst>$last_standard){$this->cache[$ts]='daylight';}else{$this->cache[$ts]='standard';}return$this->cache[$ts];}}}